/* File generated with Shader Minifier 1.1.6
 * http://www.ctrl-alt-test.fr
 */
#ifndef FRAGMENT_SHADER_INL_
# define FRAGMENT_SHADER_INL_

const char *fragment_shader_glsl_pr =
 "#version 440\n"
 "#line 1 0\n"
 "layout(location=0)uniform vec4 fpar[4];"
 "layout(location=0)out vec4 color;"
 "in vec2 p;struct Light{vec4 position;vec4 color;};\n"
 "#define NR_LIGHTS 8\nlayout(std140, binding = 0) uniform LightBlock{Light lights[NR_LIGHTS];};struct Ball{vec4 position;vec4 velocity;};\n"
 "#define NR_BALLS 8\nlayout(std140, binding = 1) uniform BallBlock{Ball balls[NR_BALLS];};"
 "vec2 resolution=vec2(fpar[0].y,fpar[0].z);\n"
 "#define TIME fpar[0].x\nstruct Camera{vec3 position;vec3 forwards;vec3 left;vec3 up;vec3 rayDir;};struct Material{vec3 diffuseColor;float specular;float shininess;};struct raymarchResult{vec3 position;vec3 normal;bool hit;Material material;};"
 "Light sun=Light(vec4(-.3,-.8,.2,1.),vec4(1.,1.,.9,-1.));"
 "vec4 permute(vec4 v)"
 "{"
   "return mod((v*34.+1.)*v,289.);"
 "}"
 "vec4 taylorInvsqrt(vec4 v)"
 "{"
   "return 1.79284-.853735*v;"
 "}"
 "vec3 fade(vec3 v)"
 "{"
   "return v*v*v*(v*(v*6.-15.)+10.);"
 "}"
 "float cnoise(vec3 v)"
 "{"
   "vec3 s=floor(v),f=s+vec3(1.);"
   "s=mod(s,289.);"
   "f=mod(f,289.);"
   "vec3 m=fract(v),n=m-vec3(1.);"
   "vec4 i=vec4(s.x,f.x,s.x,f.x),z=vec4(s.yy,f.yy),T=s.zzzz,d=f.zzzz,c=permute(permute(i)+z),r=permute(c+T),a=permute(c+d),l=r/7.,y=fract(floor(l)/7.)-.5;"
   "l=fract(l);"
   "vec4 x=vec4(.5)-abs(l)-abs(y),o=step(x,vec4(0.));"
   "l-=o*(step(0.,l)-.5);"
   "y-=o*(step(0.,y)-.5);"
   "vec4 w=a/7.,t=fract(floor(w)/7.)-.5;"
   "w=fract(w);"
   "vec4 b=vec4(.5)-abs(w)-abs(t),E=step(b,vec4(0.));"
   "w-=E*(step(0.,w)-.5);"
   "t-=E*(step(0.,t)-.5);"
   "vec3 M=vec3(l.x,y.x,x.x),e=vec3(l.y,y.y,x.y),S=vec3(l.z,y.z,x.z),C=vec3(l.w,y.w,x.w),g=vec3(w.x,t.x,b.x),L=vec3(w.y,t.y,b.y),R=vec3(w.z,t.z,b.z),u=vec3(w.w,t.w,b.w);"
   "vec4 B=taylorInvsqrt(vec4(dot(M,M),dot(S,S),dot(e,e),dot(C,C)));"
   "M*=B.x;"
   "S*=B.y;"
   "e*=B.z;"
   "C*=B.w;"
   "vec4 N=taylorInvsqrt(vec4(dot(g,g),dot(R,R),dot(L,L),dot(u,u)));"
   "g*=N.x;"
   "R*=N.y;"
   "L*=N.z;"
   "u*=N.w;"
   "float h=dot(M,m),D=dot(e,vec3(n.x,m.yz)),F=dot(S,vec3(m.x,n.y,m.z)),H=dot(C,vec3(n.xy,m.z)),k=dot(g,vec3(m.xy,n.z)),P=dot(L,vec3(n.x,m.y,n.z)),U=dot(R,vec3(m.x,n.yz)),A=dot(u,n);"
   "vec3 X=fade(m);"
   "vec4 q=mix(vec4(h,D,F,H),vec4(k,P,U,A),X.z);"
   "vec2 Y=mix(q.xy,q.zw,X.y);"
   "float W=mix(Y.x,Y.y,X.x);"
   "return 2.2*W;"
 "}"
 "const vec3 I=vec3(1,0,0),J=vec3(0,1,0);"
 "mat3 rotateY(float v)"
 "{"
   "float s=cos(v),z=sin(v);"
   "return mat3(vec3(s,0,z),vec3(0,1,0),vec3(-z,0,s));"
 "}"
 "mat3 pointatY(in vec3 v)"
 "{"
   "float s=dot(normalize(-v.xz),I.xy),x=dot(normalize(-vec2(v.z,-v.x)),I.xy);"
   "mat3 r=mat3(s,0,x,0,1,0,-x,0,s);"
   "return r;"
 "}"
 "mat3 pointatX(in vec3 v)"
 "{"
   "v=normalize(v);"
   "float s=asin(v.y);"
   "mat3 r=mat3(cos(s),-sin(s),0,sin(s),cos(s),0,0,0,1);"
   "return r;"
 "}"
 "float opSmoothUnion(float v,float s,float z)"
 "{"
   "float m=clamp(.5+.5*(s-v)/z,0.,1.);"
   "return mix(s,v,m)-z*m*(1.-m);"
 "}"
 "float sphereSDF(in vec3 v,in vec3 z,in float s)"
 "{"
   "return length(v-z)-s;"
 "}"
 "float sdPlane(vec3 v,vec4 s)"
 "{"
   "return dot(v,s.xyz)+s.w;"
 "}"
 "float sdVerticalCapsule(vec3 v,float z,float s)"
 "{"
   "return v.y-=clamp(v.y,0.,z),length(v)-s;"
 "}"
 "float sdBox(vec3 v,vec3 s)"
 "{"
   "vec3 m=abs(v)-s;"
   "return length(max(m,0.))+min(max(m.x,max(m.y,m.z)),0.);"
 "}"
 "float opSubtraction(float v,float s)"
 "{"
   "return max(-v,s);"
 "}"
 "float opSmoothSubtraction(float v,float s,float z)"
 "{"
   "float m=clamp(.5-.5*(s+v)/z,0.,1.);"
   "return mix(s,-v,m)+z*m*(1.-m);"
 "}"
 "float sdCappedCylinder(vec3 v,vec2 s)"
 "{"
   "vec2 m=abs(vec2(length(v.xz),v.y))-s;"
   "return min(max(m.x,m.y),0.)+length(max(m,0.));"
 "}"
 "float sdRoundBox(vec3 v,vec3 s,float z)"
 "{"
   "vec3 m=abs(v)-s;"
   "return length(max(m,0.))-z+min(max(m.x,max(m.y,m.z)),0.);"
 "}"
 "vec3 waterpos[6];"
 "float worldSDF2(in vec3 v)"
 "{"
   "float s=0.;"
   "s=sdPlane(v,vec4(0,1.,0.,1.));"
   "for(int r=0;r<6;r++)"
     "s=opSmoothUnion(s,sphereSDF(v,waterpos[r]*vec3(1,3,1),1),.5);"
   "return s;"
 "}"
 "float sdEnemy(in vec3 v,in vec3 s)"
 "{"
   "vec3 m=normalize(s-fpar[1].xyz);"
   "v-=s;"
   "v=v*pointatY(m);"
   "v=v*pointatX(m);"
   "float z=sphereSDF(v,vec3(0),1);"
   "z=opSmoothSubtraction(min(sphereSDF(vec3(v.x,v.y,abs(v.z)),vec3(.6,.3,.4),.3),sphereSDF(vec3(v.x,v.y,v.z),vec3(.6,-.3,0),.4)),z,.1);"
   "return min(sphereSDF(vec3(v.x,v.y,abs(v.z)),vec3(.6,.3,.4),.1),z);"
 "}"
 "float worldSDF1(in vec3 v)"
 "{"
   "float s=0.,m=sdPlane(v,vec4(0,1.,0.,2.));"
   "vec3 f,d;"
   "float z=sdEnemy(v,vec3(0,20,0)),y=sdBox(v,vec3(36.,22.,16.)),i=sdBox(v,vec3(34.5,35.,14.5)),r=min(sdCappedCylinder(vec3(v.y-6,v.x,mod(v.z+5,10)-5),vec2(4.5,36)),sdCappedCylinder(vec3(mod(v.x+5,10)-5,v.z,v.y-6),vec2(4.5,15)));"
   "r=opSubtraction(r,sdBox(v-vec3(0,8.5,0),vec3(36.,2.5,15.)));"
   "float x=sdCappedCylinder(vec3(mod(v.x,10)-5,v.y,mod(v.z,10)-5),vec2(.4,22));"
   "r=opSmoothUnion(r,x,.5);"
   "f=v-vec3(0,11,0);"
   "float w=min(sdCappedCylinder(vec3(f.y-6,f.x,mod(f.z+5,10)-5),vec2(4.5,36)),sdCappedCylinder(vec3(mod(f.x+5,10)-5,f.z,f.y-6),vec2(4.5,15)));"
   "w=opSubtraction(w,sdBox(f-vec3(0,10.5,0),vec3(36.,3.5,15.)));"
   "float l=opSmoothUnion(w,r,.5);"
   "l=min(l,sdBox(v+vec3(0,.75,0),vec3(36.,.5,15.)));"
   "l=min(l,min(sdBox(vec3(v.x-0,v.y-12,abs(v.z)-5),vec3(25.,1.,.25)),sdBox(vec3(abs(v.x)-25,v.y-12,v.z),vec3(.25,1.,5))));"
   "s=min(opSubtraction(sdBox(v,vec3(24,35,4.5)),min(l,opSubtraction(i,y))),z);"
   "return s;"
 "}"
 "float worldSDF3(in vec3 v)"
 "{"
   "float s=1000.;"
   "for(int r=0;r<NR_BALLS;r++)"
     "s=min(s,sphereSDF(v,balls[r].position.xyz,balls[r].position.w));"
   "return s;"
 "}"
 "float worldSDF(in vec3 v)"
 "{"
   "return min(worldSDF1(v),min(worldSDF2(v),worldSDF3(v)));"
 "}"
 "float shadowSDF(in vec3 v)"
 "{"
   "return min(worldSDF1(v),worldSDF2(v));"
 "}"
 "vec3 calcWorldNormal(in vec3 v)"
 "{"
   "const float s=.0001;"
   "const vec2 m=vec2(1.,-1.);"
   "return normalize(m.xyy*worldSDF(v+m.xyy*s)+m.yyx*worldSDF(v+m.yyx*s)+m.yxy*worldSDF(v+m.yxy*s)+m.xxx*worldSDF(v+m.xxx*s));"
 "}"
 "const float MIN_HIT_DIST=.01,MAX_DIST=100.,SPEED_MULTIPLIER=1.;"
 "raymarchResult worldMarch(in vec3 v,in vec3 s,const int z)"
 "{"
   "raymarchResult f;"
   "f.material.diffuseColor=vec3(1);"
   "f.hit=true;"
   "for(int r=0;r<z;r++)"
     "{"
       "float m=worldSDF(v);"
       "if(abs(m)<MIN_HIT_DIST)"
         "{"
           "break;"
         "}"
       "if(length(v)>MAX_DIST)"
         "{"
           "f.hit=false;"
           "break;"
         "}"
       "v+=s*m*SPEED_MULTIPLIER;"
     "}"
   "f.position=v;"
   "f.normal=calcWorldNormal(v);"
   "if(worldSDF2(v)<MIN_HIT_DIST)"
     "f.material.shininess=.8;"
   "else"
     " f.material.shininess=.2,f.material.diffuseColor=vec3(.1);"
   "return f;"
 "}"
 "float worldShadow(in vec3 v,in vec3 s,float m,const int z)"
 "{"
   "v+=s*MIN_HIT_DIST*30.;"
   "float r=1.,f=0.,i=1e+20;"
   "for(int l=0;l<z;l++)"
     "{"
       "float w=shadowSDF(v),y=w*w/(2.*i),d=sqrt(w*w-y*y);"
       "r=min(r,m*d/max(0.,f-y));"
       "if(w<MIN_HIT_DIST)"
         "return 0.;"
       "if(length(v)>MAX_DIST)"
         "{"
           "break;"
         "}"
       "v+=s*w;"
       "f+=w;"
       "i=w;"
     "}"
   "return r;"
 "}"
 "float pointShadow(in vec3 v,in vec3 s,float m,const int z)"
 "{"
   "vec3 r=-normalize(s);"
   "v+=r*MIN_HIT_DIST*30.;"
   "float f=1.,i=0.,y=1e+20;"
   "for(int l=0;l<z;l++)"
     "{"
       "float w=shadowSDF(v),x=w*w/(2.*y),d=sqrt(w*w-x*x);"
       "f=min(f,m*d/max(0.,i-x));"
       "if(w<MIN_HIT_DIST)"
         "return 0.;"
       "if(i>length(s))"
         "{"
           "break;"
         "}"
       "v+=r*w;"
       "i+=w;"
       "y=w;"
     "}"
   "return f;"
 "}"
 "vec3 skyColor(in vec3 v)"
 "{"
   "float s=abs(dot(v,vec3(0,1,0))),m=max(0,cnoise(v*vec3(2,6,2)+vec3(TIME*.1))+cnoise(5*v*vec3(2,6,2)+vec3(TIME*.1))*.2);"
   "return mix(vec3(.4,.5,1.),vec3(.5,.5,1.),s)+m*s;"
 "}"
 "vec3 render2(in vec3 v,in vec3 s)"
 "{"
   "raymarchResult m=worldMarch(v,s,100);"
   "if(!m.hit)"
     "return skyColor(s);"
   "vec3 r=m.material.diffuseColor,f,w=sun.color.xyz*max(vec3(0.),dot(-normalize(sun.position.xyz),m.normal));"
   "f+=vec3(worldShadow(m.position.xyz,-sun.position.xyz,200.,200))*w;"
   "return f;"
 "}"
 "vec3 render(in vec3 v,in vec3 s)"
 "{"
   "raymarchResult m=worldMarch(v,s,100);"
   "if(!m.hit)"
     "return skyColor(s);"
   "vec3 r=m.material.diffuseColor,f=r*.8*(max(0,dot(m.normal,vec3(0,.7,.7)))+max(0,dot(m.normal,vec3(0,-.7,.7)))+max(0,dot(m.normal,vec3(.4,.3,-.7))))*vec3(.7,.5,1),w=sun.color.xyz*max(vec3(0.),dot(-normalize(sun.position.xyz),m.normal));"
   "f+=vec3(worldShadow(m.position.xyz,-sun.position.xyz,40.,100))*w;"
   "vec3 z;"
   "float i;"
   "for(int l=0;l<2;l++)"
     "{"
       "z=m.position-lights[l].position.xyz;"
       "i=length(z);"
       "if(i>50)"
         "continue;"
       "vec3 n=lights[l].color.xyz*max(vec3(0),dot(m.normal,-z/i));"
       "f+=n*vec3(pointShadow(m.position.xyz,z,50.,50))*.2;"
     "}"
   "if(m.material.shininess>.7)"
     "{"
       "m.normal=normalize(m.normal+vec3(cnoise(vec3(m.position.xz*.5,TIME*.4)),0,0)*.08+vec3(cnoise(vec3(m.position.xz*2,TIME)),0,0)*.03);"
       "vec3 x=render2(m.position+m.normal*.01,reflect(s,m.normal))*.8*vec3(.7,.9,1.)*(1.1-dot(m.normal,normalize(v-m.position)))*m.material.shininess;"
       "f=mix(f,x,m.material.shininess);"
     "}"
   "return f;"
 "}"
 "Camera getCam()"
 "{"
   "Camera v;"
   "vec3 s=vec3(0,-12,0);"
   "v.position=fpar[1].xyz;"
   "v.up=vec3(0,1,0);"
   "v.forwards=normalize(fpar[2].xyz);"
   "v.left=normalize(cross(v.forwards,v.up));"
   "v.up=normalize(cross(v.left,v.forwards));"
   "vec3 m=v.position+v.forwards;"
   "vec2 f=2.*gl_FragCoord.xy/resolution.xy-1.;"
   "f*=.6;"
   "float r=resolution.x/resolution.y;"
   "vec3 w=m+f.x*v.left*r+f.y*v.up;"
   "v.rayDir=normalize(w-v.position);"
   "return v;"
 "}"
 "void main()"
 "{"
   "for(int v=0;v<6;v++)"
     "waterpos[v]=vec3(cnoise(vec3(v,TIME*2,0)),cnoise(vec3(v,TIME*2,10)),cnoise(vec3(v,TIME*2,20)));"
   "Camera v=getCam();"
   "if(abs(dist(gl_FragCoord.xy,resolution.xy/2)-6)<2)"
     "color=vec4(1.,.3,.15,1.);"
   "else"
     " color=vec4(render(v.position,v.rayDir),1.);"
 "}";

#endif // FRAGMENT_SHADER_INL_
